{"version":3,"sources":["ColorModeSwitcher.tsx","components/homecomp.tsx","components/page1.tsx","components/page2.tsx","resources/abcd1.png","resources/abcd.png","resources/Screenshot 2021-02-13 144905.png","components/page3.tsx","components/page4.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","position","top","right","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","HomeComponent","textAlign","minH","p","justifySelf","SizeExample","spacing","as","RouterLink","to","React","setSize","useDisclosure","isOpen","onOpen","onClose","map","m","Page1","width","fontWeight","RedirectButton","useState","instaRedirect","setInstaRedirect","isExternal","colorScheme","Page2","textcolor","bg","w","textColor","opacity","borderRadius","SlideEx","onToggle","direction","in","style","zIndex","mt","rounded","shadow","Page3","MyImage","forntsize","isNumeric","boxSize","src","image","fontFamily","source","pnglite","pngdark","Page4","textTransform","App","theme","path","component","render","window","location","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f5472ba0.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n    \n      position=\"fixed\"\n      top=\"5\"\n      right=\"5\"\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import * as React from \"react\"\r\nimport { Link as RouterLink } from \"react-router-dom\"\r\n\r\nimport {\r\n    Box,\r\n    Text,\r\n    Link,\r\n    VStack,\r\n    Code,\r\n    Grid,\r\n    Button,\r\n    Drawer,\r\n    DrawerBody,\r\n    DrawerContent,\r\n    DrawerHeader,\r\n    DrawerOverlay,\r\n    useDisclosure,\r\n} from \"@chakra-ui/react\"\r\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\"\r\n\r\n\r\nexport class HomeComponent extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n\r\n\r\n\r\n\r\n            <Box textAlign=\"right\">\r\n                <Grid minH=\"100vh\" p={3}>\r\n\r\n                    <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n                    <Box textAlign=\"left\" position=\"fixed\">\r\n                        <SizeExample />\r\n                    </Box>\r\n                    <VStack spacing={8}>\r\n\r\n\r\n                        <Link as={RouterLink} to=\"/\">\r\n                            Previous Page\r\n                </Link>\r\n                        <Link as={RouterLink} to=\"/page1\">\r\n                            Getting started -{\">\"}\r\n                        </Link>\r\n                        <Link as={RouterLink} to=\"/page2\">\r\n                            Cisco packet tracer\r\n                </Link>\r\n                        <Link as={RouterLink} to=\"/page3\">\r\n                            IP ADDRESS\r\n                </Link>\r\n                        <Link as={RouterLink} to=\"/page4\">\r\n                            ROUTERS\r\n                </Link>\r\n                        <Link\r\n                            color=\"teal.500\"\r\n                            as={RouterLink}\r\n                            to='/page2'\r\n                            fontSize=\"2xl\"\r\n                            position=\"sticky\"\r\n                        >\r\n                            Next Page\r\n          </Link>\r\n                    </VStack>\r\n\r\n\r\n                </Grid>\r\n            </Box>\r\n        )\r\n    }\r\n}\r\nfunction SizeExample() {\r\n    const [size, setSize] = React.useState(\"md\")\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const handleClick = (newSize: React.SetStateAction<string>) => {\r\n        setSize(newSize)\r\n        onOpen()\r\n    }\r\n\r\n    const sizes = [\"xs\"]\r\n\r\n    return (\r\n        <>\r\n            {sizes.map((size) => (\r\n                <Button\r\n                    onClick={() => handleClick(size)}\r\n                    key={size}\r\n                    m={4}\r\n                >{`MENU`}</Button>\r\n            ))}\r\n\r\n            <Drawer onClose={onClose} isOpen={isOpen} size={size}>\r\n                <DrawerOverlay>\r\n                    <DrawerContent>\r\n                        <DrawerHeader>{``}</DrawerHeader>\r\n                        <DrawerBody>\r\n                            {size === \"full\"\r\n                                ? `You're trapped 😆 , refresh the page to leave or press 'Esc' key.`\r\n                                : null}\r\n                        </DrawerBody>\r\n                    </DrawerContent>\r\n                </DrawerOverlay>\r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import * as React from \"react\"\r\nimport { useState } from \"react\"\r\nimport {\r\n    Box,\r\n    Text,\r\n    Link,\r\n    VStack,\r\n    Code,\r\n    Stack,\r\n    Grid,\r\n    Spacer,\r\n    Button,\r\n    Drawer,\r\n    DrawerBody,\r\n    DrawerContent,\r\n    DrawerHeader,\r\n    DrawerOverlay,\r\n    useDisclosure,\r\n} from \"@chakra-ui/react\"\r\nimport { Link as RouterLink, Redirect } from \"react-router-dom\"\r\n\r\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\"\r\nexport class Page1 extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <Box textAlign=\"center\" fontSize=\"xl\">\r\n                <Box textAlign=\"left\" position=\"fixed\">\r\n                    <SizeExample />\r\n                </Box>\r\n                <Box textAlign=\"left\">\r\n                    \r\n                </Box>\r\n                \r\n                <Grid minH=\"50vh\" p={3}>\r\n                <VStack spacing={2}>\r\n                    <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n                    \r\n                        <Text fontSize=\"5xl\">\r\n                            Networking & it’s Security\r\n                    <Spacer />\r\n                    Getting Started </Text>\r\n                        <Spacer />\r\n                        <Text width=\"50%\">\r\n                        Network security is a broad term that covers a multitude of technologies, devices and processes. In its simplest term, it is a set of rules and configurations designed to protect the integrity, confidentiality and accessibility of computer networks and data using both software and hardware technologies.\r\n                        </Text>\r\n                        <Text fontSize=\"2xl\" fontWeight=\"bold\">\r\n                        What is network security?\r\n                        </Text>\r\n                        <Text fontSize=\"1xl\" width=\"50%\">\r\n                        According to the SANS Institute, network security is the process of taking preventative measures to protect the underlying networking infrastructure from unauthorized access, misuse, malfunction, modification, destruction or improper disclosure. Implementing these measures allows computers, users and programs to perform their permitted critical functions within a secure environment.\r\n\r\n                        Securing a network requires a complex combination of hardware devices, such as routers, firewalls and anti-malware software applications. Government agencies and businesses employ highly skilled information security analysts to implement security plans and constantly monitor the efficacy of these plans.\r\n                    </Text>\r\n                    <Text>\r\n                        \r\nWhy is network security important?\r\n                    </Text>\r\n                    <Text width=\"60%\">\r\n                    Network security is important for home networks as well as in the business world. Most homes with high-speed internet connections have one or more wireless routers, which could be exploited if not properly secured.  A solid network security system helps reduce the risk of data loss, theft and sabotage.\r\n                    </Text>\r\n                    \r\n                    </VStack>\r\n                    </Grid>\r\n                \r\n                <Link as={RouterLink} to=\"/\">\r\n                    Previous Page\r\n                </Link>\r\n                <Spacer />\r\n                <Link as={RouterLink} to=\"/page2\"\r\n                >\r\n                    Next Page\r\n              </Link>\r\n\r\n\r\n                <Spacer />\r\n                <Link as={RouterLink} to=\"/\"\r\n                >\r\n                    Homepage\r\n              </Link>\r\n                <Spacer />\r\n\r\n                <RedirectButton />\r\n                <Spacer />\r\n\r\n\r\n            </Box>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport function RedirectButton() {\r\n    const [instaRedirect, setInstaRedirect] = useState(false);\r\n    const btnClick = () => {\r\n        setInstaRedirect(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {instaRedirect ? <Redirect to=\"/instagram\" /> : null}\r\n            <Button onClick={btnClick} isExternal colorScheme=\"teal\" >\r\n\r\n                instagram\r\n              </Button>\r\n        </>\r\n    )\r\n}\r\nfunction SizeExample() {\r\n    const [size, setSize] = React.useState(\"md\")\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const handleClick = (newSize: React.SetStateAction<string>) => {\r\n        setSize(newSize)\r\n        onOpen()\r\n    }\r\n\r\n    const sizes = [\"xs\"]\r\n\r\n    return (\r\n        <>\r\n            {sizes.map((size) => (\r\n                <Button\r\n                    onClick={() => handleClick(size)}\r\n                    key={size}\r\n                    m={4}\r\n                >{`MENU`}</Button>\r\n            ))}\r\n\r\n            <Drawer onClose={onClose} isOpen={isOpen} size={size}>\r\n                <DrawerOverlay>\r\n                    <DrawerContent>\r\n                        <DrawerHeader>{``}</DrawerHeader>\r\n                        <DrawerBody>\r\n                            {size === \"full\"\r\n                                ? `You're trapped 😆 , refresh the page to leave or press 'Esc' key.`\r\n                                : null}\r\n                        </DrawerBody>\r\n                    </DrawerContent>\r\n                </DrawerOverlay>\r\n            </Drawer>\r\n        </>\r\n    )\r\n}","import * as React from \"react\"\r\nimport { useState } from \"react\"\r\nimport {\r\n    Box,\r\n    Text,\r\n    Link,\r\n    Image,\r\n    VStack,\r\n    Button,\r\n    Grid,\r\n    Spacer,\r\n    useColorModeValue,\r\n    Slide,\r\n    useDisclosure,\r\n    Drawer,\r\n    DrawerBody,\r\n    DrawerContent,\r\n    DrawerHeader,\r\n    DrawerOverlay,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport pngdark from \"../resources/abcd1.png\";\r\nimport pnglite from \"../resources/abcd.png\";\r\n\r\nimport { Link as RouterLink, Redirect, Route } from \"react-router-dom\"\r\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\"\r\n\r\n\r\nexport function Page2() {\r\n    const color = useColorModeValue('purple.400', 'green.600');\r\n    const textcolor = useColorModeValue('white', 'white');\r\n    return (\r\n\r\n        <Box textAlign=\"center\" fontSize=\"1xl\">\r\n            <Box textAlign=\"left\" position=\"fixed\">\r\n                <SizeExample />\r\n            </Box>\r\n\r\n            <Grid minH=\"50vh\" p={3}>\r\n                <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n                <VStack>\r\n\r\n                    <Box bg={color} w=\"auto\" p={4} textColor={textcolor} opacity=\"100%\" borderRadius=\"full\">\r\n                        <Text fontSize=\"5xl\" >\r\n                            Networking & it’s Security\r\n                            </Text>\r\n\r\n                    </Box>\r\n                    <Text fontSize=\"3xl\">\r\n                        INTRODUCTION TO CISCO PACKET TRACER\r\n\r\n                        </Text>\r\n                    <Text width=\"90%\" textAlign=\"center\">\r\n                        Packet Tracer is a cross-platform visual simulation tool designed by Cisco Systems that allows users to create network topologies and imitate modern computer networks. The software\r\n                        allows users to simulate the configuration of Cisco routers and switches using a simulated command line interface\r\n                        </Text>\r\n\r\n                    <Text width=\"90%\" textAlign=\"center\">\r\n                        DOWNLOAD CPT BY CLICKING THE BELOW\r\n                            </Text>\r\n                    <RedirectButton />\r\n                    <SlideEx />\r\n                </VStack>\r\n            </Grid>\r\n            <Spacer />\r\n\r\n            <Link as={RouterLink} to=\"/page1\">\r\n                Previous Page\r\n                </Link>\r\n            <Spacer />\r\n            <Link as={RouterLink} to=\"/page3\">\r\n                Next Page\r\n                </Link>\r\n            <Spacer />\r\n            <Link as={RouterLink} to=\"/\">\r\n                Homepage\r\n                </Link>\r\n\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\nfunction SlideEx() {\r\n    const { isOpen, onToggle } = useDisclosure()\r\n    const color = useColorModeValue('purple.400', 'plum');\r\n    const textcolor = useColorModeValue('white', 'white');\r\n    return (\r\n        <>\r\n            <Button onClick={onToggle}> WHY IS CISCO PACKET TRACER USED ? </Button>\r\n            <Slide direction=\"bottom\" in={isOpen} style={{ zIndex: 10 }}>\r\n                <Box\r\n                    p=\"40px\"\r\n                    textColor={textcolor}\r\n                    mt=\"4\"\r\n                    bg={color}\r\n                    rounded=\"md\"\r\n                    shadow=\"md\"\r\n                >\r\n                    <Text>\r\n                        Packet Tracer offers an effective, interactive environment for learning networking concepts and protocols. Most importantly, Packet Tracer helps students and instructors create their own\r\n                        virtual “network worlds” for exploration, experimentation, and explanation of networking concepts and technologies.\r\n            </Text>\r\n                </Box>\r\n            </Slide>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function RedirectButton() {\r\n\r\n    const textcolor = useColorModeValue('black', 'white');\r\n    const [instaRedirect, setInstaRedirect] = useState(false);\r\n    const btnClick = () => {\r\n        setInstaRedirect(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {instaRedirect ? <Redirect to=\"/cptdownload\" /> : null}\r\n            <Button onClick={btnClick} isExternal textColor={textcolor} >\r\n\r\n                DOWNLOAD\r\n              </Button>\r\n        </>\r\n    )\r\n}\r\nfunction SizeExample() {\r\n    const [size, setSize] = React.useState(\"md\")\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const handleClick = (newSize: React.SetStateAction<string>) => {\r\n        setSize(newSize)\r\n        onOpen()\r\n    }\r\n\r\n    const sizes = [\"xs\"]\r\n\r\n    return (\r\n        <>\r\n            {sizes.map((size) => (\r\n                <Button\r\n                    onClick={() => handleClick(size)}\r\n                    key={size}\r\n                    m={4}\r\n                >{`MENU`}</Button>\r\n            ))}\r\n\r\n            <Drawer onClose={onClose} isOpen={isOpen} size={size}>\r\n                <DrawerOverlay>\r\n                    <DrawerContent>\r\n                        <DrawerHeader>{``}</DrawerHeader>\r\n                        <DrawerBody>\r\n                            {size === \"full\"\r\n                                ? `You're trapped 😆 , refresh the page to leave or press 'Esc' key.`\r\n                                : null}\r\n                        </DrawerBody>\r\n                    </DrawerContent>\r\n                </DrawerOverlay>\r\n            </Drawer>\r\n        </>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/abcd1.74f5b32f.png\";","export default __webpack_public_path__ + \"static/media/abcd.8919cef1.png\";","export default __webpack_public_path__ + \"static/media/Screenshot 2021-02-13 144905.e7ff9c8e.png\";","import * as React from \"react\"\r\n\r\nimport {\r\n    Box,\r\n    Text,\r\n    Link,\r\n    Image,\r\n    VStack,\r\n    Code,\r\n    Table,\r\n    Thead,\r\n    Tbody,\r\n    Tr,\r\n    Th,\r\n    Td,\r\n    TableCaption,\r\n    Grid,\r\n    Spacer,\r\n    RequiredIndicator,\r\n    useColorModeValue,\r\n    Tag,\r\n    TagLabel,\r\n    Kbd,\r\n    UnorderedList,\r\n    ListItem,\r\n    Button,\r\n    Slide,\r\n    useDisclosure,\r\n    Drawer,\r\n    DrawerBody,\r\n    DrawerContent,\r\n    DrawerHeader,\r\n    DrawerOverlay,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport pngdark from \"../resources/abcd1.png\";\r\nimport pnglite from \"../resources/abcd.png\";\r\nimport image from \"../resources/Screenshot 2021-02-13 144905.png\"\r\n\r\nimport { Link as RouterLink, Redirect } from \"react-router-dom\"\r\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\"\r\n\r\n\r\nexport function Page3() {\r\n    const color = useColorModeValue('purple.400', 'plum');\r\n    const textcolor = useColorModeValue('white', 'white');\r\n    return (\r\n\r\n        <Box textAlign=\"center\" fontSize=\"xl\">\r\n            <Box textAlign=\"left\" position=\"fixed\">\r\n                        <SizeExample />\r\n                    </Box>\r\n\r\n            <Grid minH=\"50vh\" p={3}>\r\n                <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n                <VStack>\r\n                    <Box>\r\n\r\n                    </Box>\r\n                    <Box bg={color} w=\"auto\" p={4} textColor={textcolor} opacity=\"100%\" borderRadius=\"full\">\r\n                        <Text fontSize=\"5xl\" >\r\n                            Networking & it’s Security\r\n                            </Text>\r\n                    </Box>\r\n                    <Text fontSize=\"4xl\" fontWeight=\"bold\">\r\n                        IP ADDRESS\r\n                    </Text>\r\n                    <Spacer />\r\n                    <Text fontSize=\"1xl\" width=\"90%\" textAlign=\"center\">\r\n                        An IP address is a unique address that identifies a device on the internet or\r\n                        a local network. IP stands for \"Internet Protocol,\" which is the set of rules\r\n                        governing the format of data sent via the internet or local network.\r\n                        There are four different types of IP addresses: public, private, static, and dynamic.\r\n                        If you want to check your public IP go to your browsre and search: \"what is my ip\"\r\n                            <br />\r\n                        <Tag size=\"lg\" variant=\"subtle\" colorScheme=\"red\">\r\n                            <TagLabel>Important: DO NOT SHARE YOUR PUBLIC IP</TagLabel>\r\n                        </Tag>\r\n                        <br />\r\n                            If you want to check your private IP follow the steps:\r\n                        </Text>\r\n\r\n                    <UnorderedList textAlign=\"left\">\r\n                        <ListItem>Press <Kbd>windows</Kbd> + <Kbd>R</Kbd></ListItem>\r\n                        <ListItem>Type <Code>cmd</Code> and press <Kbd>Enter</Kbd></ListItem>\r\n                        <ListItem>Then type in the following command <Code>ipconfig</Code></ListItem>\r\n                    </UnorderedList>\r\n                    <MyImage />\r\n                    <Spacer />\r\n\r\n                    <Text fontSize='4xl'>\r\n                        Classful Addressing</Text>\r\n                    <Text forntsize=\"2xl\">\r\n                        The 32 bit IP address is divided into five sub-classes. <br /> These are:</Text>\r\n                    <UnorderedList textAlign=\"left\">\r\n                        <Table variant=\"simple\">\r\n                            <TableCaption>CLASSES OF IP </TableCaption>\r\n                            <Thead>\r\n                                <Tr>\r\n                                    <Th>CLASSES</Th>\r\n                                    <Th isNumeric>RANGE</Th>\r\n                                    <Th>NETWORK AND HOST</Th>\r\n                                    <Th> USAGE </Th>\r\n                                </Tr>\r\n                            </Thead>\r\n                            <Tbody>\r\n                                <Tr>\r\n                                    <Td>CLASS A</Td>\r\n                                    <Td isNumeric>1-126</Td>\r\n                                    <Td > <Tag size=\"lg\" variant=\"subtle\" colorScheme=\"red\">\r\n                                        <TagLabel>N.</TagLabel>\r\n                                    </Tag><Tag size=\"lg\" variant=\"subtle\" colorScheme=\"blue\">\r\n                                            <TagLabel>H.H.H</TagLabel></Tag></Td>\r\n                                    <Td>WAN</Td>\r\n                                </Tr>\r\n                                <Tr>\r\n                                    <Td>CLASS B</Td>\r\n                                    <Td isNumeric>127-191</Td>\r\n                                    <Td><Tag size=\"lg\" variant=\"subtle\" colorScheme=\"red\">\r\n                                        <TagLabel>N.N.</TagLabel>\r\n                                    </Tag><Tag size=\"lg\" variant=\"subtle\" colorScheme=\"blue\">\r\n                                            <TagLabel>H.H</TagLabel></Tag></Td>\r\n                                    <Td>MAN</Td>\r\n                                </Tr>\r\n                                <Tr>\r\n                                    <Td>CLASS C</Td>\r\n                                    <Td isNumeric>192-223</Td>\r\n                                    <Td><Tag size=\"lg\" variant=\"subtle\" colorScheme=\"red\">\r\n                                        <TagLabel>N.N.N.</TagLabel>\r\n                                    </Tag><Tag size=\"lg\" variant=\"subtle\" colorScheme=\"blue\">\r\n                                            <TagLabel>H</TagLabel></Tag></Td>\r\n                                    <Td>LAN</Td>\r\n                                </Tr>\r\n                                <Tr>\r\n                                    <Td>CLASS D</Td>\r\n                                    <Td isNumeric>223-239</Td>\r\n                                    <Td> reserved for multitasking </Td>\r\n                                    <Td></Td>\r\n                                </Tr>\r\n                                <Tr>\r\n                                    <Td>CLASS E</Td>\r\n                                    <Td isNumeric>240-254</Td>\r\n                                    <Td> experimental,<br /> reserved for search</Td>\r\n                                    <Td></Td>\r\n                                </Tr>\r\n                            </Tbody>\r\n\r\n                        </Table>\r\n                    </UnorderedList>\r\n                    <Text >\r\n                        Each of these classes has a valid range of IP addresses.<br />\r\n                            Classes D and E are reserved for multicast and experimental purposes respectively.\r\n                    </Text>\r\n                    <Text forntsize=\"4xl\" fontWeight=\"bold\">STATIC AND DYNAMIC IP ADDRESS</Text>\r\n                    <Text forntsize=\"2xl\" width=\"90%\">An Internet Protocol (IP) address is a unique number assigned to each computer on a network.\r\n                    ... A computer on the Internet can have a static IP address, which means it stays the same over\r\n                        time, or a dynamic IP address, which means the address can change over time.</Text>\r\n                    <Text fontSize=\"4xl\">\r\n                        DIFFRENCE BETWEEN IPV4 AND IPV6\r\n                        </Text>\r\n                    <Box boxSize=\"auto\">\r\n                        <Image src={image} />\r\n                    </Box>\r\n                    <Text fontSize=\"4xl\" fontFamily=\"heading\" fontWeight=\"bold\"> SUBNETTING</Text>\r\n                    <Text fontSize=\"1xl\" width=\"90%\" textAlign=\"center\" > A subnetwork or subnet is a logical subdivision of an IP network. The practice of dividing\r\n                    a network into two or more networks is called subnetting. ... This results in the logical division of an IP address\r\n                    into two fields: the network number and the rest field or host identifier.\r\n                    </Text>\r\n                    <Text fontWeight=\"bold\" fontSize=\"3xl\">\r\n                        OR\r\n                    </Text>\r\n                    <Text width=\"90%\" textAlign=\"center\">\r\n\r\n                        An IP address is an address used in order to uniquely identify a device on an IP network. The address is made up of 32 binary bits, which can be divisible into a network portion and host portion with the help of a subnet mask</Text>\r\n\r\n                    <UnorderedList textAlign=\"left\">\r\n\r\n                        <Table variant=\"simple\">\r\n                            <TableCaption>SUBNETTING </TableCaption>\r\n                            <Thead>\r\n                                <Tr>\r\n                                    <Th isNumeric>SUBNET MASK</Th>\r\n                                    <Th>CLASS</Th>\r\n                                    <Th>NETWORK AND HOST</Th>\r\n                                </Tr>\r\n                            </Thead>\r\n                            <Tbody>\r\n                                <Tr>\r\n                                    <Td isNumeric>255.0.0.0</Td>\r\n                                    <Td> A</Td>\r\n                                    <Td > <Tag size=\"lg\" variant=\"subtle\" colorScheme=\"red\">\r\n                                        <TagLabel>N.</TagLabel>\r\n                                    </Tag><Tag size=\"lg\" variant=\"subtle\" colorScheme=\"blue\">\r\n                                            <TagLabel>H.H.H</TagLabel></Tag></Td>\r\n\r\n                                </Tr>\r\n                                <Tr>\r\n                                    <Td isNumeric>255.255.0.0</Td>\r\n                                    <Td>B</Td>\r\n                                    <Td><Tag size=\"lg\" variant=\"subtle\" colorScheme=\"red\">\r\n                                        <TagLabel>N.N.</TagLabel>\r\n                                    </Tag><Tag size=\"lg\" variant=\"subtle\" colorScheme=\"blue\">\r\n                                            <TagLabel>H.H</TagLabel></Tag></Td>\r\n\r\n                                </Tr>\r\n                                <Tr>\r\n                                    <Td isNumeric>255.255.255.0</Td>\r\n                                    <Td>C</Td>\r\n                                    <Td><Tag size=\"lg\" variant=\"subtle\" colorScheme=\"red\">\r\n                                        <TagLabel>N.N.N.</TagLabel>\r\n                                    </Tag><Tag size=\"lg\" variant=\"subtle\" colorScheme=\"blue\">\r\n                                            <TagLabel>H</TagLabel></Tag></Td>\r\n\r\n\r\n                                </Tr>\r\n                            </Tbody>\r\n\r\n                        </Table>\r\n\r\n                    </UnorderedList>\r\n                    <SlideEx/>\r\n\r\n                    <Text fontSize=\"4xl\" fontWeight=\"bold \">\r\n                        Practical Work\r\n                    </Text>\r\n                    <UnorderedList textAlign=\"left\">\r\n                        <ListItem>Finding the IP Address of computer</ListItem>\r\n                        <ListItem>Finding class of a particular IP Address</ListItem>\r\n                        <ListItem>Checking of connection</ListItem>\r\n                        <ListItem>Getting IP Address of google.com</ListItem>\r\n                    </UnorderedList>\r\n\r\n                </VStack>\r\n            </Grid>\r\n            <Spacer />\r\n\r\n            <Link as={RouterLink} to=\"/page2\">\r\n                Previous Page\r\n                </Link>\r\n            <Spacer />\r\n            <Link as={RouterLink} to=\"/page4\">\r\n                Next Page\r\n                </Link>\r\n            <Spacer />\r\n            <Link as={RouterLink} to=\"/\">\r\n                Homepage\r\n                </Link>\r\n\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction MyImage() {\r\n    const source = useColorModeValue(pnglite, pngdark);\r\n    return (\r\n        <Image\r\n            src={source}\r\n            boxSize=\"550px\"//<---- This is the property 'boxsize'\r\n        />\r\n    );\r\n}\r\nfunction SlideEx() {\r\n    const { isOpen, onToggle } = useDisclosure()\r\n    const color = useColorModeValue('purple.400', 'green.600');\r\n    const textcolor = useColorModeValue('white', 'white');\r\n    return (\r\n      <>\r\n        <Button onClick={onToggle}> NID AND BID  </Button>\r\n        <Slide direction=\"bottom\" in={isOpen} style={{ zIndex: 10 }}>\r\n          <Box\r\n            p=\"\"\r\n            textColor={textcolor}\r\n            mt=\"4\"\r\n            bg={color}\r\n            rounded=\"md\"\r\n            shadow=\"md\"\r\n          >\r\n            <Text>\r\n            Network ID (NID) to identify the network. Host ID (HID) to identify the host within a particular network NID -&gt; NETWORK ID\r\n            Broadcasting in a computer network is transmitting a message which does not require a response to all users of the network.One computer in a network sends a data packet to all other users at the same time.<br/>BID -&gt; BRODCAST ID\r\n                \r\n            \r\n            </Text>\r\n          </Box>\r\n        </Slide>\r\n      </>\r\n    )\r\n  }\r\n\r\n  function SizeExample() {\r\n    const [size, setSize] = React.useState(\"md\")\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const handleClick = (newSize: React.SetStateAction<string>) => {\r\n        setSize(newSize)\r\n        onOpen()\r\n    }\r\n\r\n    const sizes = [\"xs\"]\r\n\r\n    return (\r\n        <>\r\n            {sizes.map((size) => (\r\n                <Button\r\n                    onClick={() => handleClick(size)}\r\n                    key={size}\r\n                    m={4}\r\n                >{`MENU`}</Button>\r\n            ))}\r\n\r\n            <Drawer onClose={onClose} isOpen={isOpen} size={size}>\r\n                <DrawerOverlay>\r\n                    <DrawerContent>\r\n                        <DrawerHeader>{``}</DrawerHeader>\r\n                        <DrawerBody>\r\n                            {size === \"full\"\r\n                                ? `You're trapped 😆 , refresh the page to leave or press 'Esc' key.`\r\n                                : null}\r\n                        </DrawerBody>\r\n                    </DrawerContent>\r\n                </DrawerOverlay>\r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\n","import * as React from \"react\"\r\n\r\nimport {\r\n    Kbd,\r\n    Box,\r\n    Text,\r\n    Link,\r\n    Image,\r\n    VStack,\r\n    Grid,\r\n    Spacer,\r\n    useColorModeValue,\r\n    UnorderedList,\r\n    ListItem,\r\n    OrderedList,\r\n    Button,\r\n    Drawer,\r\n    DrawerBody,\r\n    DrawerContent,\r\n    DrawerHeader,\r\n    DrawerOverlay,\r\n    useDisclosure,\r\n    Heading,\r\n    List,\r\n    Table,\r\n    TableCaption,\r\n    Tbody,\r\n    Td,\r\n    Tfoot,\r\n    Th,\r\n    Thead,\r\n    Tr,\r\n    Tooltip,\r\n    WrapItem,\r\n    Wrap,\r\n    Slide,\r\n    Code,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport pngdark from \"../resources/abcd1.png\";\r\nimport pnglite from \"../resources/abcd.png\";\r\n\r\nimport { Link as RouterLink, Redirect } from \"react-router-dom\"\r\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\"\r\n\r\n\r\nexport function Page4() {\r\n    const color = useColorModeValue('purple.400', 'plum');\r\n    const textcolor = useColorModeValue('white', 'black');\r\n    return (\r\n\r\n        <Box textAlign=\"center\" fontSize=\"xl\">\r\n            <Box textAlign=\"left\" position=\"fixed\">\r\n                <SizeExample />\r\n            </Box>\r\n            <Grid minH=\"50vh\" p={3}>\r\n                <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n                <VStack>\r\n                    <Box>\r\n\r\n                    </Box>\r\n                    <Box bg={color} w=\"auto\" p={4} textColor={textcolor} opacity=\"100%\" borderRadius=\"full\">\r\n                        <Text fontSize=\"5xl\" >\r\n                            Networking & it’s Security\r\n                            </Text>\r\n                    </Box>\r\n                    <Text fontWeight=\"bold\" fontSize=\"3xl\">\r\n                        ROUTER\r\n</Text>\r\n                    <Text width=\"90%\" textAlign=\"left\"  >\r\n                        Routing is process of transfer of packets from one device and transferring the packet to  another device over different network.To reach destination router must have following details:-\r\n\r\n\r\n                            </Text>\r\n                    <Box width=\"fit-content\" textAlign=\"left\" >\r\n                        <OrderedList>\r\n                            <ListItem>Destination address.</ListItem>\r\n                            <ListItem>The best route to reach destination.</ListItem>\r\n                            <ListItem>Possible routes to all remote networks.</ListItem>\r\n                            <ListItem>To maintain and verify routing information.</ListItem>\r\n                            <ListItem>Possible route to all neighbors so that they can guide to destination.</ListItem>\r\n                        </OrderedList>\r\n                    </Box>\r\n\r\n\r\n                    <Heading>Concepts:</Heading>\r\n                    <OrderedList width=\"fit-content\" textAlign=\"left\">\r\n                        <ListItem>Ports</ListItem>\r\n\r\n                        <ListItem>Router Rules</ListItem>\r\n\r\n                        <ListItem>Router Modes</ListItem>\r\n\r\n                        <ListItem>Router Basic Configuration</ListItem>\r\n                    </OrderedList>\r\n                    <Heading>\r\n                        ROUTER PORTS</Heading>\r\n                    <Text>\r\n                        On basis of functionality :</Text>\r\n                    <OrderedList width=\"fit-content\" textAlign=\"left\">\r\n                        <ListItem>Interface Port</ListItem>\r\n                        <ListItem>Line Port</ListItem>\r\n                    </OrderedList>\r\n\r\n\r\n                    <Table variant=\"simple\">\r\n                        <TableCaption>TYPES OF PORT </TableCaption>\r\n                        <Thead>\r\n                            <Tr>\r\n                                <Th>PORT </Th>\r\n                                <Th> TYPES:</Th>\r\n                                <Th ></Th>\r\n                            </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            <Tr>\r\n                                <Td>Interface Port -<br />\r\n                                Used to connect the router with another devices (switch, router, pc).</Td>\r\n                                <Td> a). Ethernet Interface &gt; Old and slow<br /> b). Gigabitethernet Interface &gt; Advance<br />\r\n                            c). Serial Interface &gt; Router to router<br />\r\n                            d). Fast ethernet Interface &gt; New & fast  &gt;connect router to switch<br />\r\n\r\n                                </Td>\r\n\r\n                            </Tr>\r\n                            <Tr>\r\n                                <Td>    Line Port - <br />       used to configure the router<br /></Td>\r\n                                <Td>a). Console Port &gt; direct configuration<br />\r\n                            b). Auxiliary Port &gt; remotely configuration<br /></Td>\r\n                            </Tr>\r\n                            <Tr>\r\n\r\n                            </Tr>\r\n                        </Tbody>\r\n\r\n                    </Table><SlideEx />\r\n\r\n\r\n                    <Text width=\"70%\" textAlign=\"left\" >\r\n                        <Heading>ROUTER MODES  </Heading>\r\n                        A router is a layer 3 device used to forward packet from one network to another. It forwards the packet through one of its port on the basis of destination IP address and the entry in the routing table. By using routing table, it finds an optimised path between the source and destination network.<br />\r\n\r\n                        Let’s discuss about about Cisco router different modes.<br />\r\n                        <Heading as=\"h4\" size=\"md\" textTransform=\"uppercase\" textAlign=\"left\">\r\n                            There are mainly 5 modes in router:</Heading>\r\n                        <Heading as=\"h4\" size=\"md\" textColor={color} textTransform=\"uppercase\" textAlign=\"left\">\r\n                            User execution mode –<br /></Heading>\r\n                            As soon as the interface up message appears and press enter, the router&gt; prompt will pop up. This is called user execution mode. This mode is limited to some monitoring commands.\r\n<Heading as=\"h4\" size=\"md\" textColor={color} textTransform=\"uppercase\" textAlign=\"left\">\r\n                            Privileged mode -</Heading>\r\nAs we type enable to user mode, we enter into Privileged mode where we can view and change the configuration of router. Different commands like show running-configuration, show IP interface brief etc can run on this mode which are used for troubleshooting purpose.<Heading as=\"h4\" size=\"md\" textColor={color} textTransform=\"uppercase\" textAlign=\"left\">\r\n                            Global configuration mode –</Heading>\r\nAs we type configure terminal to the user mode, we will enter into the global configuration mode. Commands enter in these modes are called global commands and they affect the running-configuration of the router. In this mode, different configuration like making local database on router by providing username and password, can set enable and secret password etc.\r\n<Heading as=\"h4\" size=\"md\" textColor={color} textTransform=\"uppercase\" textAlign=\"left\" >\r\n                            Interface configuration mode –</Heading>\r\nIn this mode, only configuration of interfaces are done. Assigning an IP address to an interface, bringing up the interface are the common tasks done in this mode.<Heading as=\"h4\" size=\"md\" textColor={color} textTransform=\"uppercase\" textAlign=\"left\">\r\n                            ROMMON mode –</Heading>\r\nWe can enter in this mode when we interrupt boot process of the router. Generally, we enter in this mode while password recovery process or Backing up of IOS on device like TFTP server. It is like BIOS mode of a PC.\r\n\r\n                    </Text>\r\n                    <Table  variant=\"simple\">\r\n                    <TableCaption>MODES OF ROUTER </TableCaption>\r\n                        <Tr>\r\n                            <Th>Modes</Th>\r\n                            <Th>Access method </Th>\r\n                            <Th>prompt</Th>\r\n                            <Th>Exit method</Th>\r\n                        </Tr>\r\n                        <Tr>\r\n                            <Td>user execution mode</Td>\r\n                            <Td>login</Td>\r\n                            <Td><Code>router&gt;</Code></Td>\r\n                            <Td>use logout commnad</Td>\r\n                        </Tr>\r\n                        <Tr>\r\n                            <Td>privilege mode</Td>\r\n                            <Td>use enable command in user mode</Td>\r\n                            <Td><Code>router#</Code></Td>\r\n                            <Td>use disable command to enter user mode</Td>\r\n                        </Tr>\r\n                        <Tr>\r\n                            <Td>global configuration mode</Td>\r\n                            <Td>use configure terminal command </Td>\r\n                            <Td><Code>router(config)#</Code></Td>\r\n                            <Td>use exit command to enter into privilege mode</Td>\r\n                        </Tr>\r\n                        <Tr>\r\n                            <Td>Interface mode</Td>\r\n                            <Td>use interface command and specify an <br/>interface in global configuration mode</Td>\r\n                            <Td><Code>router(config-if)#</Code></Td>\r\n                            <Td>use exit command to enter into global <br/>configuration mode or <br/>use end command to enter into privilege mode. </Td>\r\n                        </Tr>\r\n                        <Tr>\r\n                            <Td>ROMMON mode</Td>\r\n                            <Td>press <Kbd>ctrl+break</Kbd> key while boot process<br/> or use reload command in privilege mode. </Td>\r\n                            <Td><Code>ROMMON 1&gt;</Code></Td>\r\n                            <Td>use continue command</Td>\r\n                        </Tr>\r\n                    </Table>\r\n                </VStack>\r\n            </Grid>\r\n            <Spacer />\r\n\r\n            <Link as={RouterLink} to=\"/page3\" >\r\n                Previous Page\r\n                </Link>\r\n\r\n            <Link as={RouterLink} to=\"/page5\">\r\n                Next Page\r\n                </Link>\r\n            <Spacer />\r\n            <Link as={RouterLink} to=\"/\">\r\n                Homepage\r\n                </Link>\r\n\r\n\r\n\r\n        </Box >\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction MyImage() {\r\n    const source = useColorModeValue(pnglite, pngdark);\r\n    return (\r\n        <Image\r\n            src={source}\r\n            boxSize=\"550px\"\r\n        />\r\n    );\r\n}\r\nfunction SizeExample() {\r\n    const [size, setSize] = React.useState(\"md\")\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const handleClick = (newSize: React.SetStateAction<string>) => {\r\n        setSize(newSize)\r\n        onOpen()\r\n    }\r\n\r\n    const sizes = [\"xs\"]\r\n\r\n    return (\r\n        <>\r\n            {sizes.map((size) => (\r\n                <Button\r\n                    onClick={() => handleClick(size)}\r\n                    key={size}\r\n                    m={4}\r\n                >{`MENU`}</Button>\r\n            ))}\r\n\r\n            <Drawer onClose={onClose} isOpen={isOpen} size={size}>\r\n                <DrawerOverlay>\r\n                    <DrawerContent>\r\n                        <DrawerHeader>{`DNKDM`}</DrawerHeader>\r\n                        <DrawerBody>\r\n                            LINKSK\r\n                        </DrawerBody>\r\n                    </DrawerContent>\r\n                </DrawerOverlay>\r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\nfunction SlideEx() {\r\n    const { isOpen, onToggle } = useDisclosure()\r\n    const color = useColorModeValue('purple.400', 'green.600');\r\n    const textcolor = useColorModeValue('white', 'white');\r\n    return (\r\n        <>\r\n            <Button onClick={onToggle}> RULES OF ROUTERS </Button>\r\n            <Slide direction=\"bottom\" in={isOpen} style={{ zIndex: 10 }}>\r\n                <Box\r\n                    p=\"\"\r\n                    textColor={textcolor}\r\n                    mt=\"4\"\r\n                    bg={color}\r\n                    rounded=\"md\"\r\n                    shadow=\"md\"\r\n                >\r\n                    <Text>\r\n                        Rule 1: All interfaces of a router should be in different network or should have different NID.<br />\r\n                        Rule 2: A serial interface connecting two router should be in same network or should have same NID.\r\n\r\n\r\n                    </Text>\r\n                </Box>\r\n            </Slide>\r\n        </>\r\n    )\r\n}","import * as React from \"react\"\nimport { Route, BrowserRouter , Switch } from \"react-router-dom\"\nimport {\n  ChakraProvider,\n  theme,\n} from \"@chakra-ui/react\"\nimport { HomeComponent } from \"./components/homecomp\"\nimport { Page1 } from \"./components/page1\"\nimport { Page2 } from \"./components/page2\"\nimport { Page3 } from \"./components/page3\"\nimport { Page4 } from \"./components/page4\"\n\nexport class App extends React.Component {\n  render() {\n    return (\n      <ChakraProvider theme={theme}>\n        <BrowserRouter>\n          <Switch>\n          <Route path=\"/page4\" component={Page4} />\n          <Route path=\"/page3\" component={Page3} />\n          <Route path=\"/page2\" component={Page2} />\n          <Route path=\"/page1\" component={Page1} />\n          <Route path=\"/cptdownload\" render={() => (window.location.href = \"https://www.filehorse.com/download-cisco-packet-tracer-32/\")} />\n     \n          <Route path=\"/instagram\" render={() => (window.location.href = \"https://www.instagram.com/_aakashdeep_2000/\")} />\n            <Route path=\"/\" component={HomeComponent} />\n          </Switch>\n        </BrowserRouter>\n      </ChakraProvider>\n    )\n  }\n}\n\n\n\n\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}